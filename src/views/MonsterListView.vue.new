<template>
  <div class="max-w-7xl mx-auto p-6">
    <!-- Header -->
    <div class="text-center mb-6">
      <h1 class="text-4xl font-medieval text-brown-900 mb-2">Monster Compendium</h1>
      <p class="text-lg text-red-900 font-body">
        Discover and filter through the realm's creatures
      </p>
    </div>

    <div v-if="monsterStore.loading" class="loading-container">
      <div class="relative w-[200px] h-[200px] mx-auto">
        <D20Dice />
      </div>
      <p class="text-center mt-4 font-medieval text-xl text-golden animate-pulse">
        Summoning monsters from the realm...
      </p>
    </div>

    <div
      v-else-if="monsterStore.error"
      class="bg-red-100 border-2 border-red-900 text-red-900 p-4 rounded-lg text-center"
    >
      {{ monsterStore.error }}
    </div>

    <div v-else>
      <!-- Filters Bar -->
      <div class="flex flex-wrap items-center gap-2 bg-white/90 rounded border border-brown-900 p-2 shadow-sm mb-4">
        <!-- Search Input -->
        <div class="flex-1 min-w-[200px]">
          <div class="relative">
            <input
              v-model="filters.search"
              type="text"
              placeholder="Search monsters..."
              class="w-full h-7 bg-parchment/50 border border-brown-900 rounded px-7 text-sm focus:outline-none focus:ring-1 focus:ring-golden transition-shadow duration-200"
            />
            <svg
              class="absolute left-2 top-1.5 h-4 w-4 text-brown-900/70"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
              />
            </svg>
          </div>
        </div>

        <!-- Type Filter -->
        <div class="w-[150px]">
          <select
            v-model="filters.type"
            class="w-full h-7 bg-parchment/50 border border-brown-900 rounded px-2 text-sm focus:outline-none focus:ring-1 focus:ring-golden transition-shadow duration-200"
          >
            <option value="">All Types</option>
            <option v-for="type in uniqueTypes" :key="type" :value="type">
              {{ type }}
            </option>
          </select>
        </div>

        <!-- Challenge Rating Filter -->
        <div class="w-[120px]">
          <select
            v-model="filters.cr"
            class="w-full h-7 bg-parchment/50 border border-brown-900 rounded px-2 text-sm focus:outline-none focus:ring-1 focus:ring-golden transition-shadow duration-200"
          >
            <option value="">All CR</option>
            <option v-for="cr in challengeRatings" :key="cr" :value="cr">
              CR {{ cr }}
            </option>
          </select>
        </div>

        <!-- View Mode Toggle -->
        <div class="flex items-center gap-1 ml-auto">
          <button
            @click="viewMode = 'grid'"
            :class="[
              'p-1.5 rounded transition-colors',
              viewMode === 'grid'
                ? 'bg-brown-900 text-parchment'
                : 'text-brown-900 hover:bg-brown-900/10'
            ]"
          >
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z"
              />
            </svg>
          </button>
          <button
            @click="viewMode = 'list'"
            :class="[
              'p-1.5 rounded transition-colors',
              viewMode === 'list'
                ? 'bg-brown-900 text-parchment'
                : 'text-brown-900 hover:bg-brown-900/10'
            ]"
          >
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M4 6h16M4 12h16M4 18h16"
              />
            </svg>
          </button>
        </div>
      </div>

      <!-- Monster Cards -->
      <div
        :class="[
          'grid gap-4',
          viewMode === 'grid' ? 'grid-cols-1 sm:grid-cols-2 lg:grid-cols-3' : 'grid-cols-1'
        ]"
      >
        <MonsterCard
          v-for="monster in filteredMonsters"
          :key="monster.index"
          :monster="monster"
          :viewMode="viewMode"
        />
      </div>

      <!-- No Results Message -->
      <div
        v-if="filteredMonsters.length === 0"
        class="text-center py-8 text-brown-900 font-medieval"
      >
        No monsters match your search criteria
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref, computed, onMounted } from 'vue'
import { useMonsterStore } from '../stores/monsters'
import MonsterCard from '../components/MonsterCard.vue'
import D20Dice from '../components/D20Dice.vue'

const monsterStore = useMonsterStore()
const viewMode = ref('grid')

const filters = ref({
  search: '',
  type: '',
  cr: '',
  size: '',
  alignment: '',
  sortBy: 'name'
})

// Filter options computed properties
const uniqueTypes = computed(() => {
  const types = new Set(monsterStore.getAllMonsters.map(m => m.type))
  return Array.from(types).filter(Boolean).sort()
})

const challengeRatings = computed(() => {
  const crs = new Set(monsterStore.getAllMonsters.map(m => m.challenge_rating))
  return Array.from(crs).filter(Boolean).sort((a, b) => a - b)
})

// Filtered and sorted monsters
const filteredMonsters = computed(() => {
  let result = [...monsterStore.getAllMonsters]

  // Text search
  if (filters.value.search) {
    const query = filters.value.search.toLowerCase()
    result = result.filter(monster => 
      monster.name.toLowerCase().includes(query) ||
      monster.type.toLowerCase().includes(query)
    )
  }

  // Type filter
  if (filters.value.type) {
    result = result.filter(monster => monster.type === filters.value.type)
  }

  // CR filter
  if (filters.value.cr !== '') {
    result = result.filter(monster => monster.challenge_rating === filters.value.cr)
  }

  // Sorting
  result.sort((a, b) => {
    if (filters.value.sortBy === 'cr') {
      return (a.challenge_rating || 0) - (b.challenge_rating || 0)
    }
    return a.name.localeCompare(b.name)
  })

  return result
})

onMounted(async () => {
  if (monsterStore.getAllMonsters.length === 0) {
    await monsterStore.fetchMonsters()
  }
})
</script>

<style scoped>
.monster-grid {
  display: grid;
  gap: 1rem;
}

@media (min-width: 640px) {
  .monster-grid {
    grid-template-columns: repeat(2, 1fr);
  }
}

@media (min-width: 1024px) {
  .monster-grid {
    grid-template-columns: repeat(3, 1fr);
  }
}
</style>
